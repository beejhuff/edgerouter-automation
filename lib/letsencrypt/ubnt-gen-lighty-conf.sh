#!/bin/bash
#
# Copyright (C) 2012 Ubiquiti Networks, Inc.  All Rights Reserved.
#

ssl_file="/tmp/10-ssl.conf"
ssl_ciphers_old='ECDSA aRSA+HIGH !3DES +kEDH +kRSA !kSRP !kPSK !NULL !RC4'
ssl_ciphers_new='ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'

echo "# /usr/share/doc/lighttpd-doc/ssl.txt" > $ssl_file
echo "# " >> $ssl_file
echo "# Do not edit, auto generated by ubnt-gen-lighty-conf.sh" >> $ssl_file

addr_list=$(cli-shell-api returnValues service gui listen-address)
eval "addrs=($addr_list)"
num_addrs=${#addrs[@]}

port=$(cli-shell-api returnValue service gui http-port)
[ -z "$port" ] && port=80
sport=$(cli-shell-api returnValue service gui https-port)
[ -z "$sport" ] && sport=443

ssl_cipher_list="ssl.cipher-list = \"$ssl_ciphers_new\""
val=$(cli-shell-api returnValue service gui older-ciphers)
if [ "$val" == enable ]; then
    ssl_cipher_list="ssl.cipher-list = \"$ssl_ciphers_old\""
fi

default_cert=/etc/lighttpd/server.pem
cert_file=$(cli-shell-api returnValue service gui cert-file)
ca_file=$(cli-shell-api returnValue service gui ca-file)
[ -z "$cert_file" ] && cert_file="$default_cert"
if [ -z "$ca_file" ]; then
    files_list="ssl.pemfile = \"$cert_file\""
else
    files_list="ssl.pemfile = \"$cert_file\"
        ssl.ca-file = \"$ca_file\""
fi

(
echo "server.port = $port"
if [ "$num_addrs" -eq 0 ];
then
  cat <<EOF

\$SERVER["socket"] == "0.0.0.0:$sport" {
        ssl.engine  = "enable"
        ssl.use-sslv3 = "disable"
        $files_list
        $ssl_cipher_list
}

\$SERVER["socket"] == "[0::0]:$port" { }

\$SERVER["socket"] == "[0::0]:$sport" {
        ssl.engine  = "enable"
        ssl.use-sslv3 = "disable"
        $files_list
        $ssl_cipher_list
}
EOF
  exit 0
fi
) >> $ssl_file

v4bind=''
for i in "${addrs[@]}"; do
    if [[ $i =~ ":" ]]; then
        i="[$i]"
        cat << EOF

\$SERVER["socket"] == "$i:$port" { }
EOF
    else
        if [ -z "$v4bind" ]; then
            v4bind=yes
            cat <<EOF

server.bind = "$i"
EOF
        else
            cat <<EOF

\$SERVER["socket"] == "$i:$port" { }
EOF
        fi
    fi

    cat << EOF

\$SERVER["socket"] == "$i:$sport" {
        ssl.engine  = "enable"
        ssl.use-sslv3 = "disable"
        $files_list
        $ssl_cipher_list
}
EOF
done >> $ssl_file

(
cat <<EOF

\$HTTP["scheme"] == "http" {
    # IPv4 redirect
    \$HTTP["host"] !~ "\[.*\]" {
        \$HTTP["host"] =~ "^([^\\:]+)(\\:.*)?$" {
            url.redirect = (
                "^(.*)$" => "https://%1:$sport\$1"
            )
        }
    }
    # IPv6 redirect
    \$HTTP["host"] =~ "\[.*\]" {
        \$HTTP["host"] =~ "^([^]]+)(.)(\:.*)?$" {
            url.redirect = (
                "^(.*)$" => "https://%1%2:$sport\$1"
            )
        }
    }
}

\$HTTP["scheme"] == "http" {
    \$HTTP["host"] =~ ".well-known/acme-challenge/*" {
        fastcgi.server = ()
        # IPv4 redirect
        \$HTTP["host"] !~ "\[.*\]" {
            \$HTTP["host"] =~ "^([^\:]+)(\:.*)?$" {
                url.redirect = ()
            }
        }

        # IPv6 redirect
        \$HTTP["host"] =~ "\[.*\]" {
            \$HTTP["host"] =~ "^([^]]+)(.)(\:.*)?$" {
                url.redirect = ()
            }
        }
    }
}
EOF
) >>$ssl_file

if cmp -s $ssl_file /etc/lighttpd/conf-enabled/10-ssl.conf ; then rm -f $ssl_file ; else mv $ssl_file /etc/lighttpd/conf-enabled/10-ssl.conf ; fi

exit 0
